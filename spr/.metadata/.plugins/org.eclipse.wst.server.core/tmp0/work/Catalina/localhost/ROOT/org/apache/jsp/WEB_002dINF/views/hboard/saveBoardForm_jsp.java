/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-08 23:34:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.hboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class saveBoardForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script> \r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	let upfiles = new Array(); // 업로드되는 파일들을 저장하는 배열\r\n");
      out.write("	\r\n");
      out.write("	$(function(){\r\n");
      out.write("		// 업로드 파일 영역에 drag & drop과 관련된 이벤트 (파일의 경우 웹브라우저에서 열림)를 방지\r\n");
      out.write("		$(\".fileUploadArea\").on(\"dragenter dragover\", function(evt){\r\n");
      out.write("			evt.preventDefault(); // 기본 이벤트 캔슬\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\".fileUploadArea\").on(\"drop\", function(evt){\r\n");
      out.write("			evt.preventDefault();\r\n");
      out.write("			\r\n");
      out.write("			console.log(evt.originalEvent.dataTransfer.files);\r\n");
      out.write("			\r\n");
      out.write("			//업로드한 파일 정보를 배열에 push \r\n");
      out.write("			for (let file of evt.originalEvent.dataTransfer.files ){\r\n");
      out.write("				\r\n");
      out.write("				// 파일 사이즈를 검사해서 10MB가 넘게되면 파일 업로드가 안되도록 한다.\r\n");
      out.write("				if(file.size > 1024 * 1024 * 10){// 10485760 바이트\r\n");
      out.write("					alert(\"파일 용량이 너무 큽니다. 업로드한 파일을 확인해 주세요.\");\r\n");
      out.write("				}else{\r\n");
      out.write("					upfiles.push(file); // 배열에 담기\r\n");
      out.write("					console.log(upfiles);\r\n");
      out.write("					\r\n");
      out.write("				\r\n");
      out.write("					//해당 파일을 업로드\r\n");
      out.write("					fileUpload(file);\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//실제로 유저가 업로드한 파일을 컨트롤러단에 전송하여 저장되도록 하는 함수.\r\n");
      out.write("	function fileUpload(file){\r\n");
      out.write("		\r\n");
      out.write("		let fd = new FormData(); // form 태그와 같은 역할의 객체\r\n");
      out.write("		fd.append(\"file\", file);\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("		    url: '/hboard/upfiles', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("		    type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("			data : fd, // 데이터 보내기\r\n");
      out.write("			processData : false,\r\n");
      out.write("			contentType : false,\r\n");
      out.write("		    dataType: \"json\", // 수신 받을 데이터 타입 (MIME TYPE)\r\n");
      out.write("		    success: function (data) {\r\n");
      out.write("			    console.log(data);\r\n");
      out.write("			    if(data.msg == \"success\"){\r\n");
      out.write("					showPreview(file, data.newFileName);\r\n");
      out.write("			    }\r\n");
      out.write("			    \r\n");
      out.write("		    },\r\n");
      out.write("		    error: function () {},\r\n");
      out.write("		    complete: function () {},\r\n");
      out.write("		  });\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 넘겨진 file이 이미지 파일이면 미리보기 하여 출력한다.\r\n");
      out.write("	function showPreview(file, newFileName){\r\n");
      out.write("		let imageType = [\"image/jpeg\", \"image/png\", \"image/gif\"];\r\n");
      out.write("		let fileType = file.type;\r\n");
      out.write("		if(imageType.indexOf(fileType) != -1){\r\n");
      out.write("			//이미지 파일이라면\r\n");
      out.write("			let output = `<div><img src ='/resources/boardUpFiles${newFileName}' /><span>${file.name}</span>`;\r\n");
      out.write("			output += `<span><img src='/resources/images/remove.png' width='20px;' onclick='remFile(this)' id='${newFileName}'/></span></div>`;\r\n");
      out.write("			$(\".preview\").append(output);\r\n");
      out.write("		}else{\r\n");
      out.write("			alert(\"이미지 파일이 아닙니다.\")\r\n");
      out.write("			let output = `<div><img src ='/resources/images/noImg.jpg'/><span>${file.name}</span>`;\r\n");
      out.write("			output += `<span><img src='/resources/images/remove.png' width='20px;' onclick='remFile(this)' id='${newFileName}'/></span></div>`;\r\n");
      out.write("			$(\".preview\").append(output);\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 업로드한 파일을 지운다. (화면, front배열(upfiles), 백엔드)\r\n");
      out.write("	function remFile(obj){\r\n");
      out.write("		console.log(\"지워야할 파일 이름 : \" + $(obj).attr('id'));\r\n");
      out.write("		let removeFileName = $(obj).attr('id');\r\n");
      out.write("		\r\n");
      out.write("		for(let i = 0; i < upfiles.length;  i++){\r\n");
      out.write("			if(upfiles[i].name == $(obj).parent().prev().html()){\r\n");
      out.write("				// 파일삭제\r\n");
      out.write("				$.ajax({\r\n");
      out.write("				    url: '/hboard/removefile', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("				    type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("					data : {\r\n");
      out.write("						\"removeFileName\" : removeFileName\r\n");
      out.write("					}, // 데이터 보내기\r\n");
      out.write("				    dataType: \"json\", // 수신 받을 데이터 타입 (MIME TYPE)\r\n");
      out.write("				    success: function (data) {\r\n");
      out.write("					    console.log(data);\r\n");
      out.write("					    \r\n");
      out.write("					    //upfiles배열에서 삭제\r\n");
      out.write("					    if(data.msg == 'success'){\r\n");
      out.write("					    	upfiles.splice(i,1);	\r\n");
      out.write("					    	console.log(upfiles);\r\n");
      out.write("					    //미리보기 태그 삭제\r\n");
      out.write("					    $(obj).parent().parent().remove();\r\n");
      out.write("					    }\r\n");
      out.write("				    },\r\n");
      out.write("				    error: function () {},\r\n");
      out.write("				    complete: function () {},\r\n");
      out.write("				  });\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	function calcelBoard(){\r\n");
      out.write("		// 취소 버튼을 클릭하면 업로드한 파일을 모두 삭제 해야 한다.\r\n");
      out.write("		// 서버에 저장한 해당 글 작성시 업로드한 모든 파일을 지우고\r\n");
      out.write("		// view단에서 태그 삭제\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("		    url: '/hboard/cancelBoard', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("		    type: \"GET\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("		    dataType: \"text\", // 수신 받을 데이터 타입 (MIME TYPE)\r\n");
      out.write("		    success: function (data) {\r\n");
      out.write("			    console.log(data);\r\n");
      out.write("				if(data == 'success'){\r\n");
      out.write("			    	location.href=\"/hboard/listAll\";\r\n");
      out.write("				}\r\n");
      out.write("		    },\r\n");
      out.write("		    error: function () {},\r\n");
      out.write("		    complete: function () {},\r\n");
      out.write("		  });\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	function validBoard(){\r\n");
      out.write("			// 게시글의 제목 (not null) 유효성 검사\r\n");
      out.write("			let result = false;\r\n");
      out.write("			let title = $(\"#title\").val();\r\n");
      out.write("			console.log(title ==='');\r\n");
      out.write("			\r\n");
      out.write("			if(title == ''){\r\n");
      out.write("				//제목을 입력하지 않은 경우\r\n");
      out.write("				alert(\"제목을 입력하세요\");\r\n");
      out.write("				$(\"#title\").focus();\r\n");
      out.write("			} else{\r\n");
      out.write("				// 제목을 입력했을 때\r\n");
      out.write("				result = true;\r\n");
      out.write("			}\r\n");
      out.write("			return result;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("	.fileUploadArea{\r\n");
      out.write("		width : 100%;\r\n");
      out.write("		height : 200px;\r\n");
      out.write("		background-color: lightgray;\r\n");
      out.write("		text-align : center;\r\n");
      out.write("		line-height : 200px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./../header.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<h1>게시글 작성</h1>\r\n");
      out.write("		<form action=\"saveBoard\" method=\"post\">\r\n");
      out.write("			<div class=\"input-group mb-3\">\r\n");
      out.write("  				<span class=\"input-group-text\">글 제목</span>\r\n");
      out.write("  				<input type=\"text\" class=\"form-control\" name=\"title\" id=\"title\" placeholder=\"글 제목을 입력하세요...\"/>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"input-group mb-3\">\r\n");
      out.write("  				<span class=\"input-group-text\">작성자</span>\r\n");
      out.write("  				<input type=\"text\" class=\"form-control\" name=\"writer\" placeholder=\"작성자를 입력하세요...\"/>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("			<label for=\"comment\">내용:</label>\r\n");
      out.write("			<textarea class=\"form-control\" rows=\"5\" id=\"content\" name=\"content\" placeholder=\"내용을 입력하세요...\"></textarea>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("<!-- 			업로드 파일 영역 -->\r\n");
      out.write("			<div class = \"fileUploadArea mb-3\">\r\n");
      out.write("				<p>업로드할 파일을 드래그하세요.</p>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div class =\"preview\">\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<button type=\"submit\" class=\"btn btn-primary\" onclick=\"return validBoard();\">저장</button>\r\n");
      out.write("			<button type=\"reset\" class=\"btn btn-primary\" onclick=\"calcelBoard();\">취소</button>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./../footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
